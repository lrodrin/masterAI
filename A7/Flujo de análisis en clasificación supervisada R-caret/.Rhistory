install.packages("rJava", dependencies=TRUE, type="source")
install.packages("rJava")
install.packages("rJava", dependencies=TRUE, type="source")
install.packages("rJava", dependencies=TRUE, type="source")
dyn.load("/Library/Java/JavaVirtualMachines/jdk1.8.0_241.jdk/Contents/Home/jre/lib/server/libjvm.dylib
")
dyn.load("/Library/Java/JavaVirtualMachines/jdk1.8.0_241.jdk/Contents/Home/jre/lib/server/libjvm.dylib
*")
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_241.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
install.packages("rJava", dependencies=TRUE, type="source")
install.packages("rJava", dependencies=TRUE, type="source")
install.packages("rJava", dependencies=TRUE, type="source")
install.packages("https://cran.r-project.org/src/contrib/Archive/rJava/rJava_0.9-9.tar.gz")
install.packages("https://cran.r-project.org/src/contrib/Archive/rJava/rJava_0.9-9.tar.gz")
install.packages("RWeka")
library(RWeka)
dyn.load("/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/jre/lib/server/libjvm.dylib
")
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
library(RWeka)
install.packages("rJava")
library(RWeka)
sudo R CMD javareconf
library(RWeka)
library(rJava)
dyn.load(/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/lib/server/libjvm.dylib)
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/lib/server/libjvm.dylib')
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/lib/server/libjvm.dylib')
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
library(rJava)
remove.packages("rJava")
remove.packages("rJava")
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
library(rJava)
install.packages("rJava")
library(rJava)
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
install.packages("rJava", type="source")
library(rJava)
install.packages("rJava", type="source")
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/lib/server/libjvm.dylib')
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
queratocono <- read.csv("Queratocono.csv", header=TRUE, sep=",")
qplot(K1, K2, data = queratocono) +
geom_point(size=I(0.3)) +
geom_smooth(method = "loess") +
xlab("K1") + ylab("K2")
qplot(K1, K2, data = queratocono) +
geom_point() +
geom_smooth(method = lm) +
xlab("K1") + ylab("K2")
qplot(K1, K2, data = queratocono) +
geom_point(size=I(0.3)) +
geom_smooth(method = "loess") +
xlab("K1") + ylab("K2")
qplot(K1, K2, data = queratocono) +
geom_point(size=I(0.3)) +
geom_smooth(method = lm) +
xlab("K1") + ylab("K2")
qplot(K1, K2, data = queratocono) +
geom_point(size=I(0.2)) +
geom_smooth(method = "loess") +
xlab("K1") + ylab("K2")
qplot(K1, K2, data = queratocono) +
geom_point(size=I(0.2)) +
geom_smooth(method = lm) +
xlab("K1") + ylab("K2")
qplot(K1, K2, data = queratocono) +
geom_point(size=I(0.1)) +
geom_smooth(method = "loess") +
xlab("K1") + ylab("K2")
qplot(K1, K2, data = queratocono) +
geom_point(size=I(0.1)) +
geom_smooth(method = lm) +
xlab("K1") + ylab("K2")
qplot(K1, K2, data = queratocono) +
geom_point(size=I(0.1)) +
geom_smooth(method = "loess") +
xlab("K1") + ylab("K2")
qplot(K1, K2, data = queratocono) +
geom_point(size=I(0.1)) +
geom_smooth(method = lm) +
xlab("K1") + ylab("K2")
qplot(K1, K2, data = queratocono) +
geom_point(size = 0.1) +
geom_smooth(method = "loess") +
xlab("K1") + ylab("K2")
qplot(K1, K2, data = queratocono) +
geom_point(size=I(0.1)) +
geom_smooth(method = lm) +
xlab("K1") + ylab("K2")
install.packages("pscl")
print
print("HELLO")
paste0(A B C, collapse = " ")
paste0("A B C", collapse = " ")
paste0("A B C", collapse = "")
paste0("A B C", collapse = "", sep = "_")
str_replace("A B C", " ", "_")
replace("A B C", " ", "_")
install.packages("dorothea")
shiny::runApp('BSC/ShinyFUNKI')
install.packages("shiny")
shiny::runApp('BSC/ShinyFUNKI')
install.packages("shinyWidgets")
runApp('BSC/ShinyFUNKI')
install.packages("tidyverse")
runApp('BSC/ShinyFUNKI')
install.packages("fs")
install.packages("survival")
R --version
R
version
install.packages("tidyverse")
shiny::runApp('BSC/ShinyFUNKI')
install.packages("fs")
install.packages("fs")
runApp('BSC/ShinyFUNKI')
install.packages("viper")
install.packages("viper")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("viper")
runApp('BSC/ShinyFUNKI')
install.packages("ggrepel")
runApp('BSC/ShinyFUNKI')
install.packages("DT")
runApp('BSC/ShinyFUNKI')
install.packages("furrr")
runApp('BSC/ShinyFUNKI')
install.packages("pheatmap")
runApp('BSC/ShinyFUNKI')
install.packages("shinyjs")
install.packages("shinyjs")
runApp('BSC/ShinyFUNKI')
install.packages("ggExtra")
runApp('BSC/ShinyFUNKI')
install.packages("tidygraph")
runApp('BSC/ShinyFUNKI')
install.packages("ggraph")
runApp('BSC/ShinyFUNKI')
runApp('BSC/ShinyFUNKI')
setwd("~/masterAI/A7/Flujo de análisis en clasificación supervisada R-caret")
library(pandoc)
install.packages(c("caret", "gplots", "rJava", "ROCR", "RWeka"))
install.packages("caret")
install.packages("mlbench")
runApp('~/BSC/ShinyFUNKI')
install.packages("knitr")
install.packages("xtable")
# Chunk 1: test1
a=1
b=4
a+b
print("hello")
# Chunk 2: test2
plot(1:10, col="red", pch=19)
# Chunk 3: test3
par(mfrow=c(1,2))
plot(1:10, col="green", pch=21)
barplot(height=sample(1:10,5), names=LETTERS[1:5], col=1:5)
# Chunk 4: women
require(xtable)
myTable<-summary(women)
# Chunk 5: manualtab
nr = nrow(myTable); nc = ncol(myTable)
for (i in 1:nr)
for(j in 1:nc) {
cat("$", myTable[i,j], "$")
if(j < nc)
cat("&")
else
cat("\\\\\n")
}
# Chunk 6: xtable1
xtab<-xtable(myTable)
print(xtab, floating=FALSE)
# Chunk 7: xtable2
xtab2<-xtable(myTable, caption="Summary of women data",  label="Table:women")
print(xtab2,include.rownames = FALSE)
# Chunk 8: sessionInfo
sessionInfo();
