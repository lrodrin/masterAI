original <- c(1000, 800, 900, 1100, 900)
predicted <- predict(original)
new.cars <- data.frame(wt=c(1.7, 2.4, 3.6))
predict(Model, newdata=new.cars)
fit_1 <- lm(original, data = original)
fit_1 <- lm(original)
lm_kang <- lm(nose_length ~ nose_width, data=original)
original <- c(1000, 800, 900, 1100, 900)
lm_kang <- lm(nose_length ~ nose_width, data=original)
lm_original -> lm(data = original)
lm_original <- lm(data = original)
lm_original <- lm(original~1)
View(lm_original)
original <- c(1000, 800, 900, 1100, 900)
original
lm_original <- lm(original~1)
lm_original
lm_original[["residuals"]]
original = c(1000, 800, 900, 1100, 900)
original
lm_original <- lm(original~1)
predicted = c(60, -140, -40, 160, -40)
predicted
d = original-predicted
mse = mean((d)^2)
mae = mean(abs(d))
version
install.packages(c("caret", "knitr", "mlbench"))
setwd("C:/Users/Laura/masterAI/A7/Flujo de análisis en clasificación supervisada R-caret")
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(mlbench)
data(Sonar)
str(Sonar)
set.seed(107)
inTrain <- createDataPartition(y=Sonar$Class, p=.75, list=FALSE)
training <- Sonar[inTrain, ]
testing <- Sonar[-inTrain, ]
dim(training)
dim(testing)
set.seed(107)
folds <- createFolds(y=Sonar$Class, k=10, list=TRUE, returnTrain = TRUE)
lapply(folds, length)
fold <- folds[[1]]
training_folds <- Sonar[fold, ]
testing_folds <- Sonar[-fold, ]
dim(training_folds)
dim(testing_folds)
set.seed(107)
resample <- createResample(y=Sonar$Class, times=10, list=TRUE)
lapply(resample, length)
fold <- resample[[1]]
training_resample <- Sonar[fold, ]
testing_resample <- Sonar[-fold, ]
dim(training_resample)
dim(testing_resample)
dim(resample)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(mlbench)
data(Sonar)
str(Sonar)
set.seed(107)
inTrain <- createDataPartition(y=Sonar$Class, p=.75, list=FALSE)
training <- Sonar[inTrain, ]
testing <- Sonar[-inTrain, ]
dim(training)
dim(testing)
set.seed(107)
folds <- createFolds(y=Sonar$Class, k=10, list=TRUE, returnTrain = TRUE)
lapply(folds, length)
fold <- folds[[1]]
training_folds <- Sonar[fold, ]
testing_folds <- Sonar[-fold, ]
dim(training_folds)
dim(testing_folds)
set.seed(107)
folds <- createResample(y=Sonar$Class, times=10, list=TRUE)
lapply(folds, length)
fold <- folds[[1]]
resample <- Sonar[fold, ]
dim(resample)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(mlbench)
data(Sonar)
str(Sonar)
set.seed(107)
inTrain <- createDataPartition(y=Sonar$Class, p=.75, list=FALSE)
training <- Sonar[inTrain, ]
testing <- Sonar[-inTrain, ]
dim(training)
dim(testing)
set.seed(107)
folds <- createFolds(y=Sonar$Class, k=10, list=TRUE, returnTrain = TRUE)
lapply(folds, length)
fold <- folds[[1]]
training_folds <- Sonar[fold, ]
testing_folds <- Sonar[-fold, ]
dim(training_folds)
dim(testing_folds)
set.seed(107)
folds <- createResample(y=Sonar$Class, times=10, list=TRUE)
lapply(folds, length)
fold <- folds[[1]]
resample <- Sonar[fold, ]
dim(resample)
ldaModel <- train (Class ~ ., data=training, method="lda", preProc=c("center","scale"))
ldaModel
ctrl <- trainControl(method = "repeatedcv", repeats=3)
ldaModel3x10cv <- train (Class ~ ., data=training,method="lda", trControl=ctrl,
preProc=c("center","scale"))
ldaModel3x10cv
ldaModel <- train (Class ~ ., data=training, method="lda", preProc=c("center","scale"))
ldaModel
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(mlbench)
data(Sonar)
str(Sonar)
set.seed(107)
inTrain <- createDataPartition(y=Sonar$Class, p=.75, list=FALSE)
training <- Sonar[inTrain, ]
testing <- Sonar[-inTrain, ]
dim(training)
dim(testing)
set.seed(107)
folds <- createFolds(y=Sonar$Class, k=10, list=TRUE, returnTrain = TRUE)
lapply(folds, length)
fold <- folds[[1]]
training_folds <- Sonar[fold, ]
testing_folds <- Sonar[-fold, ]
dim(training_folds)
dim(testing_folds)
set.seed(107)
folds <- createResample(y=Sonar$Class, times=10, list=TRUE)
lapply(folds, length)
fold <- folds[[1]]
resample <- Sonar[fold, ]
dim(resample)
ldaModel <- train (Class ~ ., data=training, method="lda", preProc=c("center","scale"))
ldaModel
ctrl <- trainControl(method = "repeatedcv", repeats=3)
ldaModel3x10cv <- train (Class ~ ., data=training,method="lda", trControl=ctrl,
preProc=c("center","scale"))
ldaModel3x10cv
ctrl <- trainControl(method = "repeatedcv", repeats=3, classProbs=TRUE,
summaryFunction=twoClassSummary)
ldaModel3x10cv <- train (Class ~ ., data=training, method="lda", trControl=ctrl,
metric="ROC", preProc=c("center","scale"))
ldaModel3x10cv
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(mlbench)
data(Sonar)
str(Sonar)
set.seed(107)
inTrain <- createDataPartition(y=Sonar$Class, p=.75, list=FALSE)
training <- Sonar[inTrain, ]
testing <- Sonar[-inTrain, ]
dim(training)
dim(testing)
set.seed(107)
folds <- createFolds(y=Sonar$Class, k=10, list=TRUE, returnTrain = TRUE)
lapply(folds, length)
fold <- folds[[1]]
training_folds <- Sonar[fold, ]
testing_folds <- Sonar[-fold, ]
dim(training_folds)
dim(testing_folds)
set.seed(107)
folds <- createResample(y=Sonar$Class, times=10, list=TRUE)
lapply(folds, length)
fold <- folds[[1]]
resample <- Sonar[fold, ]
dim(resample)
ldaModel <- train (Class ~ ., data=training, method="lda", preProc=c("center","scale"))
ldaModel
ctrl <- trainControl(method = "repeatedcv", repeats=3)
ldaModel3x10cv <- train (Class ~ ., data=training,method="lda", trControl=ctrl, preProc=c("center","scale"))
ldaModel3x10cv
ctrl <- trainControl(method = "repeatedcv", repeats=3, classProbs=TRUE, summaryFunction=twoClassSummary)
ldaModel3x10cv <- train (Class ~ ., data=training, method="lda", trControl=ctrl, metric="ROC",
preProc=c("center","scale"))
ldaModel3x10cv
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(mlbench)
data(Sonar)
str(Sonar)
set.seed(107)
inTrain <- createDataPartition(y=Sonar$Class, p=.75, list=FALSE)
training <- Sonar[inTrain, ]
testing <- Sonar[-inTrain, ]
dim(training)
dim(testing)
set.seed(107)
folds <- createFolds(y=Sonar$Class, k=10, list=TRUE, returnTrain = TRUE)
lapply(folds, length)
fold <- folds[[1]]
training_folds <- Sonar[fold, ]
testing_folds <- Sonar[-fold, ]
dim(training_folds)
dim(testing_folds)
set.seed(107)
folds <- createResample(y=Sonar$Class, times=10, list=TRUE)
lapply(folds, length)
fold <- folds[[1]]
resample <- Sonar[fold, ]
dim(resample)
ldaModel <- train (Class ~ ., data=training, method="lda", preProc=c("center","scale"))
ldaModel
ctrl <- trainControl(method = "repeatedcv", repeats=3)
ldaModel3x10cv <- train (Class ~ ., data=training,method="lda", trControl=ctrl,
preProc=c("center","scale"))
ldaModel3x10cv
ctrl <- trainControl(method = "repeatedcv", repeats=3, classProbs=TRUE,
summaryFunction=twoClassSummary)
ldaModel3x10cv <- train (Class ~ ., data=training, method="lda", trControl=ctrl, metric="ROC",
preProc=c("center","scale"))
ldaModel3x10cv
plsFit3x10cv <- train (Class ~ ., data=training, method="pls", trControl=ctrl, metric="ROC",
preProc=c("center","scale"))
plsFit3x10cv
plot(plsFit3x10cv)
plsFit3x10cv <- train (Class ~ ., data=training, method="pls", trControl=ctrl, metric="ROC",
tuneLength=15, preProc=c("center","scale"))
plsFit3x10cv
plot(plsFit3x10cv)
plsProbs <- predict(plsFit3x10cv, newdata = testing, type = "prob")
plsClasses <- predict(plsFit3x10cv, newdata = testing, type = "raw")
confusionMatrix(data=plsClasses, testing$Class)
resamps = resamples(list(pls=plsFit3x10cv, lda=ldaModel3x10cv))
summary(resamps)
xyplot(resamps, what="BlandAltman")
diffs <- diff(resamps)
summary(diffs)
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(mlbench)
data(Sonar)
str(Sonar)
set.seed(107)
inTrain <- createDataPartition(y=Sonar$Class, p=.75, list=FALSE)
training <- Sonar[inTrain, ]
testing <- Sonar[-inTrain, ]
dim(training)
dim(testing)
set.seed(107)
folds <- createFolds(y=Sonar$Class, k=10, list=TRUE, returnTrain = TRUE)
lapply(folds, length)
fold <- folds[[1]]
training_folds <- Sonar[fold, ]
testing_folds <- Sonar[-fold, ]
dim(training_folds)
dim(testing_folds)
set.seed(107)
folds <- createResample(y=Sonar$Class, times=10, list=TRUE)
lapply(folds, length)
fold <- folds[[1]]
resample <- Sonar[fold, ]
dim(resample)
ldaModel <- train (Class ~ ., data=training, method="lda", preProc=c("center","scale"))
ldaModel
ctrl <- trainControl(method = "repeatedcv", repeats=3)
ldaModel3x10cv <- train (Class ~ ., data=training,method="lda", trControl=ctrl,
preProc=c("center","scale"))
ldaModel3x10cv
ctrl <- trainControl(method = "repeatedcv", repeats=3, classProbs=TRUE,
summaryFunction=twoClassSummary)
ldaModel3x10cv <- train (Class ~ ., data=training, method="lda", trControl=ctrl, metric="ROC",
preProc=c("center","scale"))
ldaModel3x10cv
plsFit3x10cv <- train (Class ~ ., data=training, method="pls", trControl=ctrl, metric="ROC",
preProc=c("center","scale"))
plsFit3x10cv
plot(plsFit3x10cv)
plsFit3x10cv <- train (Class ~ ., data=training, method="pls", trControl=ctrl, metric="ROC",
tuneLength=15, preProc=c("center","scale"))
plsFit3x10cv
plot(plsFit3x10cv)
plsProbs <- predict(plsFit3x10cv, newdata = testing, type = "prob")
plsClasses <- predict(plsFit3x10cv, newdata = testing, type = "raw")
confusionMatrix(data=plsClasses, testing$Class)
resamps = resamples(list(pls=plsFit3x10cv, lda=ldaModel3x10cv))
summary(resamps)
xyplot(resamps, what="BlandAltman")
diffs <- diff(resamps)
summary(diffs)
knit_with_parameters('C:/Users/Laura/masterAI/A7/Flujo de análisis en clasificación supervisada R-caret/tutorial.Rmd', encoding = 'UTF-8')
setwd("C:/Users/Laura/masterAI/A7/Flujo de análisis en clasificación supervisada R-caret")
setwd("C:/Users/Laura/masterAI/A7/Flujo de análisis en clasificación supervisada R-caret")
