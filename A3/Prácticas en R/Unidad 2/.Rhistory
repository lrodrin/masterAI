# Model Neural Network
library(nnet)
set.seed(825)
nn <- train(Class ~ .,
data=data_training,
method="nnet",
trControl=fitControl)
nn
# Model Nearest Neighbour
library(snn)
set.seed(825)
snn <- train(Class ~ .,
data=data_training,
method="snn",
trControl=fitControl)
snn
# Model SVM (linear kernel)
library(kernlab)
set.seed(825)
svm <- train(Class ~ .,
data=data_training,
method="svmLinear",
trControl=fitControl)
svm
resamps <- resamples(list("Naive Bayes"=nb,
"Decision Tree"=dt,
"Neural Network"=nn,
"Nearest Neighbour"=snn,
"SVM (linear kernel)" = svm))
summary(resamps)
#4.
#5.
#a)
#b)
#c)
library(rpart)
set.seed(825)
dt <- train(Class ~ .,
data=data_training,
method="rpart2",
trControl=fitControl)
dt
resamps <- resamples(list("Naive Bayes"=nb,
"Decision Tree"=dt,
"Neural Network"=nn,
"Nearest Neighbour"=snn,
"SVM (linear kernel)" = svm))
summary(resamps)
set.seed(825)
knn <- train(Class ~ .,
data=data_training,
method="knn",
trControl=fitControl)
knn
resamps <- resamples(list("Naive Bayes"=nb,
"Decision Tree"=dt,
"Neural Network"=nn,
"Nearest Neighbour"=knn,
"SVM (linear kernel)" = svm))
summary(resamps)
# 1.
data <- read.table("tic-tac-toe.data.txt", header=FALSE, sep=",")
names(data) <- c("top-left-square",
"top-middle-square",
"top-right-square",
"middle-left-square",
"middle-middle-square",
"middle-right-square",
"bottom-left-square",
"bottom-middle-square",
"bottom-right-square",
"Class")
# make Valid Column Names
colnames(data) <- make.names(colnames(data))
# check for missing values
any(is.na(data))
# 2.
library(lattice)
library(ggplot2)
library(caret)
set.seed(825)
inTraining <- createDataPartition(data$Class, p=.7, list=FALSE)
data_training <- data[ inTraining,]
data_testing  <- data[-inTraining,]
#3.
fitControl <- trainControl(method="repeatedcv",
number=10,
repeats=1)
# Model Naive Bayes
library(e1071)
library(naivebayes)
set.seed(825)
nb <- train(Class ~ .,
data=data_training,
method="naive_bayes",
trControl=fitControl)
nb
# Model Decision Tree
library(rpart)
set.seed(825)
dt <- train(Class ~ .,
data=data_training,
method="rpart2",
trControl=fitControl)
dt
# Model Neural Network
library(nnet)
set.seed(825)
nn <- train(Class ~ .,
data=data_training,
method="nnet",
trControl=fitControl)
nn
# Model Nearest Neighbour
set.seed(825)
knn <- train(Class ~ .,
data=data_training,
method="knn",
trControl=fitControl)
knn
# Model SVM (linear kernel)
library(kernlab)
set.seed(825)
svm <- train(Class ~ .,
data=data_training,
method="svmLinear",
trControl=fitControl)
svm
resamps <- resamples(list("Naive Bayes"=nb,
"Decision Tree"=dt,
"Neural Network"=nn,
"Nearest Neighbour"=knn,
"SVM (linear kernel)" = svm))
summary(resamps)
#4.
#5.
#a)
#b)
#c)
# 1.
data <- read.table("tic-tac-toe.data.txt", header=FALSE, sep=",")
names(data) <- c("top-left-square",
"top-middle-square",
"top-right-square",
"middle-left-square",
"middle-middle-square",
"middle-right-square",
"bottom-left-square",
"bottom-middle-square",
"bottom-right-square",
"Class")
# make Valid Column Names
colnames(data) <- make.names(colnames(data))
# check for missing values
any(is.na(data))
# 2.
library(lattice)
library(ggplot2)
library(caret)
set.seed(825)
inTraining <- createDataPartition(data$Class, p=.7, list=FALSE)
data_training <- data[ inTraining,]
data_testing  <- data[-inTraining,]
#3.
fitControl <- trainControl(method="repeatedcv",
number=10,
repeats=1)
# Model Naive Bayes
library(e1071)
library(naivebayes)
set.seed(825)
nb <- train(Class ~ .,
data=data_training,
method="naive_bayes",
trControl=fitControl)
nb
# Model Decision Tree
library(rpart)
set.seed(825)
dt <- train(Class ~ .,
data=data_training,
method="rpart2",
trControl=fitControl)
dt
# Model Neural Network
library(nnet)
set.seed(825)
nn <- train(Class ~ .,
data=data_training,
method="nnet",
trControl=fitControl)
nn
# Model Nearest Neighbour
set.seed(825)
knn <- train(Class ~ .,
data=data_training,
method="knn",
trControl=fitControl)
knn
# Model SVM (linear kernel)
library(kernlab)
set.seed(825)
svm <- train(Class ~ .,
data=data_training,
method="svmLinear",
trControl=fitControl)
svm
resamps <- resamples(list("Naive Bayes"=nb,
"Decision Tree"=dt,
"Neural Network"=nn,
"Nearest Neighbour"=knn,
"SVM (linear kernel)" = svm))
summary(resamps)
#4.
#5.
#a)
#b)
#c)
nb_test <- predict(nb, newdata = head(data_testing))
nb_test
nb_test <- predict(nb, newdata = data_testing)
nb_test
# 1.
data <- read.table("tic-tac-toe.data.txt", header=FALSE, sep=",")
names(data) <- c("top-left-square",
"top-middle-square",
"top-right-square",
"middle-left-square",
"middle-middle-square",
"middle-right-square",
"bottom-left-square",
"bottom-middle-square",
"bottom-right-square",
"Class")
# make Valid Column Names
colnames(data) <- make.names(colnames(data))
# check for missing values
any(is.na(data))
# 2.
library(lattice)
library(ggplot2)
library(caret)
set.seed(825)
inTraining <- createDataPartition(data$Class, p=.7, list=FALSE)
data_training <- data[ inTraining,]
data_testing  <- data[-inTraining,]
#3.
fitControl <- trainControl(method="repeatedcv",
number=10,
repeats=1)
# Model Naive Bayes
library(e1071)
library(naivebayes)
set.seed(825)
nb <- train(Class ~ .,
data=data_training,
method="naive_bayes",
trControl=fitControl)
nb
# Model Decision Tree
library(rpart)
set.seed(825)
dt <- train(Class ~ .,
data=data_training,
method="rpart2",
trControl=fitControl)
dt
# Model Neural Network
library(nnet)
set.seed(825)
nn <- train(Class ~ .,
data=data_training,
method="nnet",
trControl=fitControl)
nn
# Model Nearest Neighbour
set.seed(825)
knn <- train(Class ~ .,
data=data_training,
method="knn",
trControl=fitControl)
knn
# Model SVM (linear kernel)
library(kernlab)
set.seed(825)
svm <- train(Class ~ .,
data=data_training,
method="svmLinear",
trControl=fitControl)
svm
resamps <- resamples(list("Naive Bayes"=nb,
"Decision Tree"=dt,
"Neural Network"=nn,
"Nearest Neighbour"=knn,
"SVM (linear kernel)" = svm))
summary(resamps)
#4.
# Model Naive Bayes
nbPredict <- predict(nb, newdata=data_testing)
confusionMatrix(nbPredict, data_testing$Class)
#5.
#a)
#b)
#c)
nbPredict <- predict(nb, newdata=data_testing)
confusionMatrix(nbPredict, data_testing$Class)
# Model Decision Tree
dtPredict <- predict(dt, newdata=data_testing)
confusionMatrix(dtPredict, data_testing$Class)
# Model Neural Network
nnPredict <- predict(nn, newdata=data_testing)
confusionMatrix(nnPredict, data_testing$Class)
# Model Nearest Neighbour
knnPredict <- predict(knn, newdata=data_testing)
confusionMatrix(knnPredict, data_testing$Class)
# Model SVM (linear kernel)
svmPredict <- predict(svm, newdata=data_testing)
confusionMatrix(svmPredict, data_testing$Class)
# 1.
data <- read.table("tic-tac-toe.data.txt", header=FALSE, sep=",")
names(data) <- c("top-left-square",
"top-middle-square",
"top-right-square",
"middle-left-square",
"middle-middle-square",
"middle-right-square",
"bottom-left-square",
"bottom-middle-square",
"bottom-right-square",
"Class")
# make valid Column Names
colnames(data) <- make.names(colnames(data))
# check for missing values
any(is.na(data))
# 2.
library(lattice)
library(ggplot2)
library(caret)
set.seed(825)
inTraining <- createDataPartition(data$Class, p=.7, list=FALSE)
data_training <- data[ inTraining,]
data_testing  <- data[-inTraining,]
#3.
# specifiy the type of resampling
fitControl <- trainControl(method="repeatedcv",
number=10,
repeats=1)
# Model Naive Bayes
library(e1071)
library(naivebayes)
set.seed(825)
nb <- train(Class ~ .,
data=data_training,
method="naive_bayes",
trControl=fitControl)
nb
# Model Decision Tree
library(rpart)
set.seed(825)
dt <- train(Class ~ .,
data=data_training,
method="rpart2",
trControl=fitControl)
dt
# Model Neural Network
library(nnet)
set.seed(825)
nn <- train(Class ~ .,
data=data_training,
method="nnet",
trControl=fitControl)
nn
# Model Nearest Neighbour
set.seed(825)
knn <- train(Class ~ .,
data=data_training,
method="knn",
trControl=fitControl)
knn
# Model SVM (linear kernel)
library(kernlab)
set.seed(825)
svm <- train(Class ~ .,
data=data_training,
method="svmLinear",
trControl=fitControl)
svm
# Collecting the resampling results
resamps <- resamples(list("Naive Bayes"=nb,
"Decision Tree"=dt,
"Neural Network"=nn,
"Nearest Neighbour"=knn,
"SVM (linear kernel)" = svm))
summary(resamps)
#4.
# Model Naive Bayes
nbPredict <- predict(nb, newdata=data_testing)
confusionMatrix(nbPredict, data_testing$Class)
# Model Decision Tree
dtPredict <- predict(dt, newdata=data_testing)
confusionMatrix(dtPredict, data_testing$Class)
# Model Neural Network
nnPredict <- predict(nn, newdata=data_testing)
confusionMatrix(nnPredict, data_testing$Class)
# Model Nearest Neighbour
knnPredict <- predict(knn, newdata=data_testing)
confusionMatrix(knnPredict, data_testing$Class)
# Model SVM (linear kernel)
svmPredict <- predict(svm, newdata=data_testing)
confusionMatrix(svmPredict, data_testing$Class)
#5.
#a)
#b)
#c)
resampsPredict <- resamples(list("Naive Bayes"=nbPredict,
"Decision Tree"=dtPredict,
"Neural Network"=nnPredict,
"Nearest Neighbour"=knnPredict,
"SVM (linear kernel)" = svmPredict))
summary(resampsPredict)
resampsPredict <- resamples(list("Naive Bayes"=nbPredict,
"Decision Tree"=dtPredict,
"Neural Network"=nnPredict,
"Nearest Neighbour"=knnPredict,
"SVM (linear kernel)" = svmPredict))
resampsPredict
nbPredict <- predict(nb, newdata=data_testing)
confusionMatrix(nbPredict, data_testing$Class)
# Model Decision Tree
dtPredict <- predict(dt, newdata=data_testing)
confusionMatrix(dtPredict, data_testing$Class)
# Model Neural Network
nnPredict <- predict(nn, newdata=data_testing)
confusionMatrix(nnPredict, data_testing$Class)
# Model Nearest Neighbour
knnPredict <- predict(knn, newdata=data_testing)
confusionMatrix(knnPredict, data_testing$Class)
# Model SVM (linear kernel)
svmPredict <- predict(svm, newdata=data_testing)
confusionMatrix(svmPredict, data_testing$Class)
# Collecting the testing resampling results
resampsPredict <- resamples(list("Naive Bayes"=nbPredict,
"Decision Tree"=dtPredict,
"Neural Network"=nnPredict,
"Nearest Neighbour"=knnPredict,
"SVM (linear kernel)" = svmPredict))
summary(resampsPredict)
resampsPredict <- postResample(list("Naive Bayes"=nbPredict,
"Decision Tree"=dtPredict,
"Neural Network"=nnPredict,
"Nearest Neighbour"=knnPredict,
"SVM (linear kernel)" = svmPredict))
summary(resampsPredict)
nbPredict <- predict(nb, newdata=data_testing)
nbMatrix <- confusionMatrix(nbPredict, data_testing$Class)
postResample(nbMatrix)
postResample(nbPredict, data_testing$Class)
nbPredict <- predict(nb, newdata=data_testing)
confusionMatrix(nbPredict, data_testing$Class)
postResample(nbPredict, data_testing$Class)
# Model Decision Tree
dtPredict <- predict(dt, newdata=data_testing)
confusionMatrix(dtPredict, data_testing$Class)
postResample(dtPredict, data_testing$Class)
# Model Neural Network
nnPredict <- predict(nn, newdata=data_testing)
confusionMatrix(nnPredict, data_testing$Class)
postResample(nnPredict, data_testing$Class)
# Model Nearest Neighbour
knnPredict <- predict(knn, newdata=data_testing)
confusionMatrix(knnPredict, data_testing$Class)
postResample(knnPredict, data_testing$Class)
# Model SVM (linear kernel)
svmPredict <- predict(svm, newdata=data_testing)
confusionMatrix(svmPredict, data_testing$Class)
postResample(svmPredict, data_testing$Class)
resampsPredict <- postResample(list("Naive Bayes"=c(nbPredict, data_testing$Class)))
summary(resampsPredict)
join(postResample(nbPredict, data_testing$Class), postResample(dtPredict, data_testing$Class))
postResample(nbPredict, data_testing$Class)
postResample(dtPredict, data_testing$Class)
postResample(nnPredict, data_testing$Class)
postResample(knnPredict, data_testing$Class)
postResample(svmPredict, data_testing$Class)
nbPredict <- predict(nb, newdata=data_testing)
confusionMatrix(nbPredict, data_testing$Class)
# Model Decision Tree
dtPredict <- predict(dt, newdata=data_testing)
confusionMatrix(dtPredict, data_testing$Class)
# Model Neural Network
nnPredict <- predict(nn, newdata=data_testing)
confusionMatrix(nnPredict, data_testing$Class)
# Model Nearest Neighbour
knnPredict <- predict(knn, newdata=data_testing)
confusionMatrix(knnPredict, data_testing$Class)
# Model SVM (linear kernel)
svmPredict <- predict(svm, newdata=data_testing)
confusionMatrix(svmPredict, data_testing$Class)
# Collecting the testing resampling results
postResample(nbPredict, data_testing$Class)
postResample(dtPredict, data_testing$Class)
postResample(nnPredict, data_testing$Class)
postResample(knnPredict, data_testing$Class)
postResample(svmPredict, data_testing$Class)
prSummary(nbPredict, lev = levels(data_testing$Class))
install.packages("MLmetrics")
library(MLmetrics)
prSummary(nbPredict, lev = levels(data_testing$Class))
prSummary(nb, lev = levels(data_testing$Class))
auc <- performance(nbPredict, "auc")
install.packages("AUC")
prSummary(data_testing, lev = levels(data_testing$Class))
