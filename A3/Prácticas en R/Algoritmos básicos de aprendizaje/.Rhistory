original <- c(1000, 800, 900, 1100, 900)
predicted <- predict(original)
new.cars <- data.frame(wt=c(1.7, 2.4, 3.6))
predict(Model, newdata=new.cars)
fit_1 <- lm(original, data = original)
fit_1 <- lm(original)
lm_kang <- lm(nose_length ~ nose_width, data=original)
original <- c(1000, 800, 900, 1100, 900)
lm_kang <- lm(nose_length ~ nose_width, data=original)
lm_original -> lm(data = original)
lm_original <- lm(data = original)
lm_original <- lm(original~1)
View(lm_original)
original <- c(1000, 800, 900, 1100, 900)
original
lm_original <- lm(original~1)
lm_original
lm_original[["residuals"]]
original = c(1000, 800, 900, 1100, 900)
original
lm_original <- lm(original~1)
predicted = c(60, -140, -40, 160, -40)
predicted
d = original-predicted
mse = mean((d)^2)
mae = mean(abs(d))
library(caret)
library(gplots)
library(ggplot2)
library(rJava)
library(RWeka)
library(ROCR)
glass <- read.table("glass.data", header = FALSE, sep = ",")
# Add column names
names(glass) <- c("Id number", "RI", "Na", "Mg", "Al", "Si", "K", "Ca", "Ba", "Fe",
"Type of glass")
# Make valid column names
colnames(glass) <- make.names(colnames(glass))
# Delete Id number column
glass <- subset(glass, select = -Id.number)
# Rename Type of glass to Class
colnames(glass)[10] <- "Class"
# Order for column Class
glass <- glass[order(glass$Class), ]
0# Check for NA values
any(is.na(glass))
# Remove Class elements < 3
glass <- subset(glass , glass$Class < 3)
for (i in 1:146) {
if (glass$Class[i] == 1){
glass$Class[i] <- 'positive'
}
else {
glass$Class[i] <- 'negative'
}
}
# Change the type of class variable Class to factor
glass[,10] <- as.factor(glass[,10])
# data splitting
set.seed(123)
inTraining <- createDataPartition(glass$Class, p = .7, list = FALSE)
training <- glass[ inTraining,]
str(training)
testing  <- glass[-inTraining,]
str(testing)
fitControl <- trainControl(method = "cv",
number = 5,
classProbs = FALSE)
# OneR
set.seed(123)
oner <- train(Class ~ ., data = training,
method = "OneR",
trControl = fitControl)
onerPredict <- predict(oner, newdata = testing)
cm_oner <- confusionMatrix(onerPredict, testing$Class)
onerPredictProb <- predict(oner, newdata = testing, type = "prob")
onerPred <- prediction(onerPredictProb$positive, testing$Class)
onerPerf <- performance(onerPred, "tpr", "fpr")
# kNN with k=1, k=3
set.seed(123)
grid_knn <- expand.grid(k = seq(1, 3))
knn <- train(Class ~ ., data = training,
method = "knn",
trControl = fitControl,
tuneGrid = grid_knn)
knn
knnPredict <- predict(knn, newdata = testing)
cm_knn <- confusionMatrix(knnPredict, testing$Class)
knnPredictProb <- predict(knn, newdata = testing, type = "prob")
knnPred <- prediction(knnPredictProb$positive, testing$Class)
knnPerf <- performance(knnPred, "tpr", "fpr")
# Multilayer PerceptrÃ³n
set.seed(123)
grid_mlp = expand.grid(layer1 = 3,
layer2 = 5,
layer3 = 7)
mlp <- train(Class ~., data = training,
method = "mlpML",
trControl = fitControl,
tuneGrid = grid_mlp)
mlp
mlpPredict <- predict(mlp, newdata = testing)
cm_mlp <- confusionMatrix(mlpPredict,testing$Class)
mlpPredictProb <- predict(mlp, newdata = testing, type = "prob")
mlpPred <- prediction(mlpPredictProb$positive, testing$Class)
mlpPerf <- performance(mlpPred, "tpr", "fpr")
# ROC
plot(onerPerf, col = "orange", add = FALSE)
plot(knnPerf, col = "blue", add = TRUE)
plot(mlpPerf, col = "black", add = TRUE)
title(main = "CURVAS ROC")
legend("bottomright", legend = c("OnerR", "kNN", "MLP"),
col = c("orange", "blue", "black"),
lty = 1, lwd = 1)
setwd("C:/Users/Laura/masterAI/A3/Prácticas en R/Algoritmos básicos de aprendizaje")
library(caret)
library(gplots)
library(ggplot2)
library(rJava)
library(RWeka)
library(ROCR)
glass <- read.table("glass.data", header = FALSE, sep = ",")
# Add column names
names(glass) <- c("Id number", "RI", "Na", "Mg", "Al", "Si", "K", "Ca", "Ba", "Fe",
"Type of glass")
# Make valid column names
colnames(glass) <- make.names(colnames(glass))
# Delete Id number column
glass <- subset(glass, select = -Id.number)
# Rename Type of glass to Class
colnames(glass)[10] <- "Class"
# Order for column Class
glass <- glass[order(glass$Class), ]
0# Check for NA values
any(is.na(glass))
# Remove Class elements < 3
glass <- subset(glass , glass$Class < 3)
for (i in 1:146) {
if (glass$Class[i] == 1){
glass$Class[i] <- 'positive'
}
else {
glass$Class[i] <- 'negative'
}
}
# Change the type of class variable Class to factor
glass[,10] <- as.factor(glass[,10])
# data splitting
set.seed(123)
inTraining <- createDataPartition(glass$Class, p = .7, list = FALSE)
training <- glass[ inTraining,]
str(training)
testing  <- glass[-inTraining,]
str(testing)
fitControl <- trainControl(method = "cv",
number = 5,
classProbs = FALSE)
# OneR
set.seed(123)
oner <- train(Class ~ ., data = training,
method = "OneR",
trControl = fitControl)
onerPredict <- predict(oner, newdata = testing)
cm_oner <- confusionMatrix(onerPredict, testing$Class)
onerPredictProb <- predict(oner, newdata = testing, type = "prob")
onerPred <- prediction(onerPredictProb$positive, testing$Class)
onerPerf <- performance(onerPred, "tpr", "fpr")
# kNN with k=1, k=3
set.seed(123)
grid_knn <- expand.grid(k = seq(1, 3))
knn <- train(Class ~ ., data = training,
method = "knn",
trControl = fitControl,
tuneGrid = grid_knn)
knn
knnPredict <- predict(knn, newdata = testing)
cm_knn <- confusionMatrix(knnPredict, testing$Class)
knnPredictProb <- predict(knn, newdata = testing, type = "prob")
knnPred <- prediction(knnPredictProb$positive, testing$Class)
knnPerf <- performance(knnPred, "tpr", "fpr")
# Multilayer PerceptrÃ³n
set.seed(123)
grid_mlp = expand.grid(layer1 = 3,
layer2 = 5,
layer3 = 7)
mlp <- train(Class ~., data = training,
method = "mlpML",
trControl = fitControl,
tuneGrid = grid_mlp)
mlp
mlpPredict <- predict(mlp, newdata = testing)
cm_mlp <- confusionMatrix(mlpPredict,testing$Class)
mlpPredictProb <- predict(mlp, newdata = testing, type = "prob")
mlpPred <- prediction(mlpPredictProb$positive, testing$Class)
mlpPerf <- performance(mlpPred, "tpr", "fpr")
# ROC
plot(onerPerf, col = "orange", add = FALSE)
plot(knnPerf, col = "blue", add = TRUE)
plot(mlpPerf, col = "black", add = TRUE)
title(main = "CURVAS ROC")
legend("bottomright", legend = c("OnerR", "kNN", "MLP"),
col = c("orange", "blue", "black"),
lty = 1, lwd = 1)
