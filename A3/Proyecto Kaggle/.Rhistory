install.packages("rJava", dependencies=TRUE, type="source")
install.packages("rJava")
install.packages("rJava", dependencies=TRUE, type="source")
install.packages("rJava", dependencies=TRUE, type="source")
dyn.load("/Library/Java/JavaVirtualMachines/jdk1.8.0_241.jdk/Contents/Home/jre/lib/server/libjvm.dylib
")
dyn.load("/Library/Java/JavaVirtualMachines/jdk1.8.0_241.jdk/Contents/Home/jre/lib/server/libjvm.dylib
*")
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_241.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
install.packages("rJava", dependencies=TRUE, type="source")
install.packages("rJava", dependencies=TRUE, type="source")
install.packages("rJava", dependencies=TRUE, type="source")
install.packages("https://cran.r-project.org/src/contrib/Archive/rJava/rJava_0.9-9.tar.gz")
install.packages("https://cran.r-project.org/src/contrib/Archive/rJava/rJava_0.9-9.tar.gz")
install.packages("RWeka")
library(RWeka)
dyn.load("/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/jre/lib/server/libjvm.dylib
")
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
library(RWeka)
install.packages("rJava")
library(RWeka)
sudo R CMD javareconf
library(RWeka)
library(rJava)
dyn.load(/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/lib/server/libjvm.dylib)
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/lib/server/libjvm.dylib')
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/lib/server/libjvm.dylib')
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
library(rJava)
remove.packages("rJava")
remove.packages("rJava")
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
library(rJava)
install.packages("rJava")
library(rJava)
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/jre/lib/server/libjvm.dylib')
install.packages("rJava", type="source")
library(rJava)
install.packages("rJava", type="source")
dyn.load('/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/lib/server/libjvm.dylib')
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
queratocono <- read.csv("Queratocono.csv", header=TRUE, sep=",")
qplot(K1, K2, data = queratocono) +
geom_point(size=I(0.3)) +
geom_smooth(method = "loess") +
xlab("K1") + ylab("K2")
qplot(K1, K2, data = queratocono) +
geom_point() +
geom_smooth(method = lm) +
xlab("K1") + ylab("K2")
qplot(K1, K2, data = queratocono) +
geom_point(size=I(0.3)) +
geom_smooth(method = "loess") +
xlab("K1") + ylab("K2")
qplot(K1, K2, data = queratocono) +
geom_point(size=I(0.3)) +
geom_smooth(method = lm) +
xlab("K1") + ylab("K2")
qplot(K1, K2, data = queratocono) +
geom_point(size=I(0.2)) +
geom_smooth(method = "loess") +
xlab("K1") + ylab("K2")
qplot(K1, K2, data = queratocono) +
geom_point(size=I(0.2)) +
geom_smooth(method = lm) +
xlab("K1") + ylab("K2")
qplot(K1, K2, data = queratocono) +
geom_point(size=I(0.1)) +
geom_smooth(method = "loess") +
xlab("K1") + ylab("K2")
qplot(K1, K2, data = queratocono) +
geom_point(size=I(0.1)) +
geom_smooth(method = lm) +
xlab("K1") + ylab("K2")
qplot(K1, K2, data = queratocono) +
geom_point(size=I(0.1)) +
geom_smooth(method = "loess") +
xlab("K1") + ylab("K2")
qplot(K1, K2, data = queratocono) +
geom_point(size=I(0.1)) +
geom_smooth(method = lm) +
xlab("K1") + ylab("K2")
qplot(K1, K2, data = queratocono) +
geom_point(size = 0.1) +
geom_smooth(method = "loess") +
xlab("K1") + ylab("K2")
qplot(K1, K2, data = queratocono) +
geom_point(size=I(0.1)) +
geom_smooth(method = lm) +
xlab("K1") + ylab("K2")
setwd("~/masterAI/A3/Proyecto Kaggle")
knitr::opts_chunk$set(echo = TRUE)
data <- as.data.frame(fread("data.csv", header = TRUE, stringsAsFactors = TRUE))
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
# **Introducción**
Este proyecto lleva a cabo un proyecto completo de Ciencia de Datos donde vamos a analizar, transformar, modelar y evaluar un conjunto de datos de Kaggle (https://www.kaggle.com/). Concretamente, para este proyecto se ha usado un conjunto de datos que describe los aciertos y fallos de lanzamientos a canasta del jugador de baloncesto Kobe Bryant durante 20 años de su carrera en la NBA (https://www.kaggle.com/c/kobe-bryant-shot-selection/data).
La tarea del proyecto es predecir si los lanzamientos a canastas de Kobe Bryant entraron o no en el aro (atributo *“shot_made_flag”*), es decir, los lanzamientos acertados. Del conjunto de datos se han eliminado 5000 valores de este atributo (representados como valores faltantes en el conjunto de datos). Estos datos serán el conjunto de prueba sobre el cual se realizará la predicción.
El conjunto de datos contiene 30697 (25697 + 5000) instancias y un gran número de variables explicativas (11 discretas y 14 numéricas). Estas 25 variables (incluyendo clase a predecir *“shot_made_flag”*) se centran en la descripción cualitativa y cuantitativa de multitud de aspectos de cada uno de los lanzamientos de Kobe Bryant.
```{r message=FALSE, warning=FALSE, include=FALSE}
library(tidyverse)
library(ggplot2)
library(data.table)
```
```{r message=FALSE, warning=FALSE, echo=FALSE}
data <- as.data.frame(fread("data.csv", header = TRUE, stringsAsFactors = TRUE))
str(data, strict.width = "cut")
str?
? str
? str
format(Sys.Date(), "%Y")
format(Sys.Date(), "%M %Y")
format(Sys.Date(), "%a %Y")
format(Sys.Date(), "%b %Y")
format(Sys.Date(), "%d %Y")
