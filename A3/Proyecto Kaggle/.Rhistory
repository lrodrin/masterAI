train$game_event_id <- NULL;
test$game_event_id <- NULL;
train$game_id <- NULL;
test$game_id <- NULL;
train$lat <- NULL;
test$lat <- NULL;
train$lon <- NULL;
test$lon <- NULL;
train.y = train$shot_made_flag;
train$shot_made_flag <- NULL;
test$shot_made_flag <- NULL;
pred <- rep(0,nrow(test));
cat("Creating data.matrix...\n");
trainM<-data.matrix(train, rownames.force = NA);
cat("Creating DMarix for xgboost...\n");
dtrain <- xgb.DMatrix(data=trainM, label=train.y, missing = NaN);
watchlist <- list(trainM=dtrain);
set.seed(1984);
param <- list(  objective           = "binary:logistic",
booster             = "gbtree",
eval_metric         = "logloss",
eta                 = 0.035,
max_depth           = 4,
subsample           = 0.40,
colsample_bytree    = 0.40
)
clf <- xgb.cv(  params              = param,
data                = dtrain,
nrounds             = 1500,
verbose             = 1,
watchlist           = watchlist,
maximize            = FALSE,
nfold               = 3,
early.stop.round    = 10,
print.every.n       = 1
);
bestRound <- which.min( as.matrix(clf)[,3] );
cat("Best round:", bestRound,"\n");
cat("Best result:",min(as.matrix(clf)[,3]),"\n");
clf <- xgb.train(   params              = param,
data                = dtrain,
nrounds             = bestRound,
verbose             = 1,
watchlist           = watchlist,
maximize            = FALSE
)
testM <-data.matrix(test, rownames.force = NA);
preds <- predict(clf, testM);
submission <- data.frame(shot_id=test.id, shot_made_flag=preds);
cat("Saving the submission file\n");
write.csv(submission, "basicXGBoost.csv", row.names = F)
cat("Loading libraries...\n");
library(xgboost)
library(data.table)
library(Matrix)
cat("Reading CSV file...\n");
completeData <- as.data.frame(fread("data.csv", header = T, stringsAsFactors = T))
cat("Splitting data...\n");
train<-subset(completeData, !is.na(completeData$shot_made_flag));
test<-subset(completeData, is.na(completeData$shot_made_flag));
test.id <- test$shot_id;
train$shot_id <- NULL;
test$shot_id <- NULL;
cat("Creating new features...\n");
train$time_remaining <- train$minutes_remaining*60+train$seconds_remaining;
test$time_remaining <- test$minutes_remaining*60+test$seconds_remaining;
cat("Treating features...\n");
train$shot_distance[train$shot_distance>45] <- 45;
test$shot_distance[test$shot_distance>45] <- 45;
cat("Dropping features...\n");
train$seconds_remaining<-NULL;
test$seconds_remaining<-NULL;
train$team_name <- NULL;
test$team_name <- NULL;
train$team_id <- NULL;
test$team_id <- NULL;
train$game_event_id <- NULL;
test$game_event_id <- NULL;
train$game_id <- NULL;
test$game_id <- NULL;
train$lat <- NULL;
test$lat <- NULL;
train$lon <- NULL;
test$lon <- NULL;
train.y = train$shot_made_flag;
train$shot_made_flag <- NULL;
test$shot_made_flag <- NULL;
pred <- rep(0,nrow(test));
cat("Creating data.matrix...\n");
trainM<-data.matrix(train, rownames.force = NA);
cat("Creating DMarix for xgboost...\n");
dtrain <- xgb.DMatrix(data=trainM, label=train.y, missing = NaN);
watchlist <- list(trainM=dtrain);
set.seed(1984);
param <- list(  objective           = "binary:logistic",
booster             = "gbtree",
eval_metric         = "logloss",
eta                 = 0.035,
max_depth           = 4,
subsample           = 0.40,
colsample_bytree    = 0.40
)
clf <- xgb.cv(  params              = param,
data                = dtrain,
nrounds             = 1500,
verbose             = 1,
watchlist           = watchlist,
maximize            = FALSE,
nfold               = 3,
early.stop.round    = 10,
print.every.n       = 1
);
bestRound <- which.min( as.matrix(clf)[,3] );
cat("Best round:", bestRound,"\n");
cat("Best result:",min(as.matrix(clf)[,3]),"\n");
clf <- xgb.train(   params              = param,
data                = dtrain,
nrounds             = bestRound,
verbose             = 1,
watchlist           = watchlist,
maximize            = FALSE
)
testM <-data.matrix(test, rownames.force = NA);
preds <- predict(clf, testM);
submission <- data.frame(shot_id=test.id, shot_made_flag=preds);
cat("Saving the submission file\n");
write.csv(submission, "basicXGBoost.csv", row.names = F)
bestRound <- which.min( as.matrix(clf)[,3] )
testM <-data.matrix(test, rownames.force = NA);
preds <- predict(clf, testM);
submission <- data.frame(shot_id=test.id, shot_made_flag=preds);
cat("Saving the submission file\n");
write.csv(submission, "basicXGBoost.csv", row.names = F)
testM <-data.matrix(test, rownames.force = NA);
preds <- predict(clf, testM);
cat("Loading libraries...\n");
library(xgboost)
library(data.table)
library(Matrix)
cat("Reading CSV file...\n");
completeData <- as.data.frame(fread("data.csv", header = T, stringsAsFactors = T))
cat("Splitting data...\n");
train<-subset(completeData, !is.na(completeData$shot_made_flag));
test<-subset(completeData, is.na(completeData$shot_made_flag));
test.id <- test$shot_id;
train$shot_id <- NULL;
test$shot_id <- NULL;
cat("Creating new features...\n");
train$time_remaining <- train$minutes_remaining*60+train$seconds_remaining;
test$time_remaining <- test$minutes_remaining*60+test$seconds_remaining;
cat("Treating features...\n");
train$shot_distance[train$shot_distance>45] <- 45;
test$shot_distance[test$shot_distance>45] <- 45;
cat("Dropping features...\n");
train$seconds_remaining<-NULL;
test$seconds_remaining<-NULL;
train$team_name <- NULL;
test$team_name <- NULL;
train$team_id <- NULL;
test$team_id <- NULL;
train$game_event_id <- NULL;
test$game_event_id <- NULL;
train$game_id <- NULL;
test$game_id <- NULL;
train$lat <- NULL;
test$lat <- NULL;
train$lon <- NULL;
test$lon <- NULL;
train.y = train$shot_made_flag;
train$shot_made_flag <- NULL;
test$shot_made_flag <- NULL;
pred <- rep(0,nrow(test));
cat("Creating data.matrix...\n");
trainM<-data.matrix(train, rownames.force = NA);
cat("Creating DMarix for xgboost...\n");
dtrain <- xgb.DMatrix(data=trainM, label=train.y, missing = NaN);
watchlist <- list(trainM=dtrain);
set.seed(1984);
param <- list(  objective           = "binary:logistic",
booster             = "gbtree",
eval_metric         = "logloss",
eta                 = 0.035,
max_depth           = 4,
subsample           = 0.40,
colsample_bytree    = 0.40
)
clf <- xgb.cv(  params              = param,
data                = dtrain,
nrounds             = 1500,
verbose             = 1,
watchlist           = watchlist,
maximize            = FALSE,
nfold               = 3,
early.stop.round    = 10,
print.every.n       = 1
);
testM <-data.matrix(test, rownames.force = NA);
preds <- predict(clf, testM);
submission <- data.frame(shot_id=test.id, shot_made_flag=preds);
cat("Saving the submission file\n");
write.csv(submission, "basicXGBoost.csv", row.names = F)
library(data.table)
library(caret)
##loading data
data <- as.data.frame(fread("data.csv", header = T, stringsAsFactors = T))
library(ggplot2)
library(tidyverse)
#loading data
data <- read_csv("data.csv")
data <- na.omit(data)
any(is.na(data))
outlier_values <- boxplot.stats(data$shot_made_flag)$out  # outlier values.
library(ggplot2)
library(tidyverse)
#loading data
data <- read_csv("data.csv")
data <- na.omit(data)
any(is.na(data))
outlier_values <- boxplot.stats(data)$out  # outlier values.
library(ggplot2)
library(tidyverse)
#loading data
data <- read_csv("data.csv")
data <- na.omit(data)
any(is.na(data))
outlier_values <- boxplot.stats(data$action_type)$out  # outlier values.
library(ggplot2)
library(tidyverse)
#loading data
data <- read_csv("data.csv")
data <- na.omit(data)
any(is.na(data))
outlier_values <- boxplot.stats(data$short_distance)$out  # outlier values.
library(ggplot2)
library(tidyverse)
#loading data
data <- read_csv("data.csv")
data <- na.omit(data)
any(is.na(data))
outlier_values <- boxplot.stats(data$shot_distance)$out  # outlier values.
outlier_values
outlier_values <- boxplot.stats(train_dat$shot_distance)$out  # outlier values.
library(e1071)
library(lattice)
library(ggplot2)
library(caret)
library(MASS)
library(randomForest)
data <- read.csv("data.csv", sep = "," , stringsAsFactors = FALSE)
cat("splitting data to train and test......\n")
train <- subset(data, !is.na(data$shot_made_flag))
test <- subset(data, is.na(data$shot_made_flag))
cat("precessing the train data......\n")
train$shot_made_flag <- as.factor(train$shot_made_flag)
train$shot_made_flag <- factor(train$shot_made_flag, levels = c("1", "0"))
#handle with the train features
train$shot_distance[train$shot_distance > 40] <- 40
train$time_remaining <- train$minutes_remaining*60 + train$seconds_remaining
#normalize function
nnorm <- function (target) {
(target - min(target))/(max(target) - min(target))
}
train$shot_distance <- nnorm(train$shot_distance)
train$time_remaining <- nnorm(train$time_remaining)
#create subset of train to predict
train_dat <- data.frame(train$shot_distance, train$time_remaining, train$shot_made_flag)
colnames(train_dat) <- c("shot_distance", "time_remaining", "shot_made_flag")
colnames(train_dat) <- make.names(colnames(train_dat))
train_dat <- train_dat[order(train_dat$shot_made_flag), ] # order by shot_made_flag
##remove outliers
outlier_values <- boxplot.stats(train_dat$shot_distance)$out  # outlier values.
##remove outliers
outlier_values <- boxplot.stats(train$shot_distance)$out  # outlier values.
library(e1071)
library(lattice)
library(ggplot2)
library(caret)
library(MASS)
library(randomForest)
data <- read.csv("data.csv", sep = "," , stringsAsFactors = FALSE)
cat("splitting data to train and test......\n")
train <- subset(data, !is.na(data$shot_made_flag))
test <- subset(data, is.na(data$shot_made_flag))
cat("precessing the train data......\n")
train$shot_made_flag <- as.factor(train$shot_made_flag)
train$shot_made_flag <- factor(train$shot_made_flag, levels = c("1", "0"))
#handle with the train features
train$shot_distance[train$shot_distance > 40] <- 40
train$time_remaining <- train$minutes_remaining*60 + train$seconds_remaining
#normalize function
nnorm <- function (target) {
(target - min(target))/(max(target) - min(target))
}
train$shot_distance <- nnorm(train$shot_distance)
train$time_remaining <- nnorm(train$time_remaining)
#create subset of train to predict
train_dat <- data.frame(train$shot_distance, train$time_remaining, train$shot_made_flag)
colnames(train_dat) <- c("shot_distance", "time_remaining", "shot_made_flag")
colnames(train_dat) <- make.names(colnames(train_dat))
train_dat <- train_dat[order(train_dat$shot_made_flag), ] # order by shot_made_flag
##remove outliers
outlier_values <- boxplot.stats(train$shot_distance)$out  # outlier values.
library(e1071)
library(lattice)
library(ggplot2)
library(caret)
library(MASS)
library(randomForest)
data <- read.csv("data.csv", sep = "," , stringsAsFactors = FALSE)
cat("splitting data to train and test......\n")
train <- subset(data, !is.na(data$shot_made_flag))
test <- subset(data, is.na(data$shot_made_flag))
cat("precessing the train data......\n")
train$shot_made_flag <- as.factor(train$shot_made_flag)
train$shot_made_flag <- factor(train$shot_made_flag, levels = c("1", "0"))
#handle with the train features
train$shot_distance[train$shot_distance > 40] <- 40
train$time_remaining <- train$minutes_remaining*60 + train$seconds_remaining
#normalize function
nnorm <- function (target) {
(target - min(target))/(max(target) - min(target))
}
train$shot_distance <- nnorm(train$shot_distance)
train$time_remaining <- nnorm(train$time_remaining)
#create subset of train to predict
train_dat <- data.frame(train$shot_distance, train$time_remaining, train$shot_made_flag)
colnames(train_dat) <- c("shot_distance", "time_remaining", "shot_made_flag")
colnames(train_dat) <- make.names(colnames(train_dat))
train_dat <- train_dat[order(train_dat$shot_made_flag), ] # order by shot_made_flag
##remove outliers
outlier_values <- boxplot.stats(data$shot_distance)$out  # outlier values.
outlier_values
data <- data[ , !(names(data$shot_distance) %in% outlier_values)]
View(data)
drops <- c("game_event_id", "game_id", "loc_x", "loc_y", "lat", "lon",
"minutes_remaining", "seconds_remaining", "shot_distance",
"shot_zone_area", "shot_zone_basic", "shot_zone_range",
"team_id", "team_name", "game_date", "matchup", "shot_id")
data <- data[ , !(names(data) %in% drops)]
View(data)
library(e1071)
library(lattice)
library(ggplot2)
library(caret)
library(MASS)
library(randomForest)
data <- read.csv("data.csv", sep = "," , stringsAsFactors = FALSE)
##remove outliers
outlier_values <- boxplot.stats(data$shot_distance)$out  # outlier values.
drops <- c("game_event_id", "game_id", "loc_x", "loc_y", "lat", "lon",
"minutes_remaining", "seconds_remaining", "shot_distance",
"shot_zone_area", "shot_zone_basic", "shot_zone_range",
"team_id", "team_name", "game_date", "matchup", "shot_id")
data <- data[ , !(names(data) %in% drops)]
outlier_values
library(e1071)
library(lattice)
library(ggplot2)
library(caret)
library(MASS)
library(randomForest)
data <- read.csv("data.csv", sep = "," , stringsAsFactors = FALSE)
##remove outliers
outlier_values <- boxplot.stats(data$shot_distance)$out  # outlier values.
for (elem in data$shot_distance) {
print(elem)
}
library(e1071)
library(lattice)
library(ggplot2)
library(caret)
library(MASS)
library(randomForest)
data <- read.csv("data.csv", sep = "," , stringsAsFactors = FALSE)
##remove outliers
outlier_values <- boxplot.stats(data$shot_distance)$out  # outlier values.
for (elem in data$shot_distance) {
for (out in outlier_values){
if (elem == out) print("YES")
}
}
library(e1071)
library(lattice)
library(ggplot2)
library(caret)
library(MASS)
library(randomForest)
data <- read.csv("data.csv", sep = "," , stringsAsFactors = FALSE)
##remove outliers
outlier_values <- boxplot.stats(data$shot_distance)$out  # outlier values.
for (elem in data$shot_distance) {
for (out in outlier_values){
if (elem == out) {
data$shot_distance <- data$shot_distance[-c(out),]
}
}
}
View(data)
library(e1071)
library(lattice)
library(ggplot2)
library(caret)
library(MASS)
library(randomForest)
data <- read.csv("data.csv", sep = "," , stringsAsFactors = FALSE)
##remove outliers
outlier_values <- boxplot.stats(data$shot_distance)$out  # outlier values.
data$shot_distance <- data$shot_distance[-c(47),]
library(e1071)
library(lattice)
library(ggplot2)
library(caret)
library(MASS)
library(randomForest)
data <- read.csv("data.csv", sep = "," , stringsAsFactors = FALSE)
##remove outliers
outlier_values <- boxplot.stats(data$shot_distance)$out  # outlier values.
data$shot_distance <- data$shot_distance[-47,]
library(e1071)
library(lattice)
library(ggplot2)
library(caret)
library(MASS)
library(randomForest)
data <- read.csv("data.csv", sep = "," , stringsAsFactors = FALSE)
##remove outliers
outlier_values <- boxplot.stats(data$shot_distance)$out  # outlier values.
data$shot_distance <- data$shot_distance[-47]
library(e1071)
library(lattice)
library(ggplot2)
library(caret)
library(MASS)
library(randomForest)
data <- read.csv("data.csv", sep = "," , stringsAsFactors = FALSE)
##remove outliers
outlier_values <- boxplot.stats(data$shot_distance)$out  # outlier values.
for (elem in data$shot_distance) {
for (out in outlier_values){
if (elem == out) {
print("YES", elem)
}
}
library(e1071)
library(lattice)
library(ggplot2)
library(caret)
library(MASS)
library(randomForest)
data <- read.csv("data.csv", sep = "," , stringsAsFactors = FALSE)
##remove outliers
outlier_values <- boxplot.stats(data$shot_distance)$out  # outlier values.
for (elem in data$shot_distance) {
for (out in outlier_values){
if (elem == out) {
print("YES")
}
}
}
library(e1071)
library(lattice)
library(ggplot2)
library(caret)
library(MASS)
library(randomForest)
data <- read.csv("data.csv", sep = "," , stringsAsFactors = FALSE)
##remove outliers
outlier_values <- boxplot.stats(data$shot_distance)$out  # outlier values.
for (elem in data$shot_distance) {
for (out in outlier_values){
if (elem == out) print("YES", elem)
}
}
library(e1071)
library(lattice)
library(ggplot2)
library(caret)
library(MASS)
library(randomForest)
data <- read.csv("data.csv", sep = "," , stringsAsFactors = FALSE)
##remove outliers
outlier_values <- boxplot.stats(data$shot_distance)$out  # outlier values.
for (elem in data$shot_distance) {
for (out in outlier_values){
if (elem == out) print("YES %", elem)
}
}
library(e1071)
library(lattice)
library(ggplot2)
library(caret)
library(MASS)
library(randomForest)
data <- read.csv("data.csv", sep = "," , stringsAsFactors = FALSE)
##remove outliers
outlier_values <- boxplot.stats(data$shot_distance)$out  # outlier values.
for (elem in data$shot_distance) {
for (out in outlier_values){
if (elem == out) print("YES")
}
}
library(e1071)
library(lattice)
library(ggplot2)
library(caret)
library(MASS)
library(randomForest)
data <- read.csv("data.csv", sep = "," , stringsAsFactors = FALSE)
##remove outliers
outlier_values <- boxplot.stats(data$shot_distance)$out  # outlier values.
""
;
